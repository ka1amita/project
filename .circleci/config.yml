version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0
  aws-s3: circleci/aws-s3@4.0.0
  aws-cli: circleci/aws-cli@4.0
  # discord: teka23/discord@0.0.1

jobs:
  parallel_tests_backend:
    working_directory: &backend ~/project/backend
    executor: &java8
      name: gradle/default
      tag: "8.0"
    parallelism: 5
    steps:
      - checkout:
          path: ..
      - gradle/with_cache:
          steps:
            # allows "re-run failed tests"; https://circleci.com/docs/rerun-failed-tests/
            - run:
                name: Parse classnames and split by timing
                command: |
                  cd src/test/java
                  circleci tests glob "**/*.java" | cut -c 1- | sed 's@/@.@g' | sed 's/.\{5\}$//' | circleci tests run --command=">classnames.txt xargs echo" --verbose --split-by=timings --timings-type=classname
                  [ -s classnames.txt ] || circleci-agent step halt
            - run:
                name: Run split tests
                command: |
                  GRADLE_ARGS=$(cat src/test/java/classnames.txt | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
                  echo "Prepared arguments for Gradle: $GRADLE_ARGS"
                  ./gradlew test $GRADLE_ARGS
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/tests
  
  deploy_backend:
    working_directory: *backend
    executor: *java8
    parameters:
      env:
        description: Environment name suffix ("dev", "staging", "production") you want to deploy.
        type: enum
        enum: ["dev", "staging", "production"]
        default: "dev"
      archive:
        description: Is it desired to archive old application build in S3 bucket?
        type: boolean
        default: false
      rename_files:
        description: Custom build files (.jar and .env) name.
        type: string
        default: ""
    environment:
      BUCKET: s3://committed-todo-app-<<parameters.env>>
    steps:
      - checkout:
          path: ..
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID # the orb default
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY # the orb default
          region: AWS_DEFAULT_REGION #  the orb default
      - run:
          name: SSH Connection check
          command: ssh -o StrictHostKeychecking=no ${EC2_USER}@${EC2_HOST} echo Hello ${CIRCLE_USERNAME}

      - gradle/with_cache:
          steps:
            - run:
                name: Build the jar
                command: ./gradlew bootJar
            - run:
                name: Rename the jar to todo-app-{env}-{commit-hash}.jar
                command: mv -v $(find build/libs -type f -name "*.jar") build/libs/todo-app-<<parameters.env>>-<<pipeline.git.revision>>.jar
      - run:
          name: Kill previous application instance
          command: ssh ${EC2_USER}@${EC2_HOST} "cat app.pid | xargs kill" || true # suppress error message if no processes are matched (e.g. after a crash)

      - when:
          condition: <<parameters.archive>>
          steps: 
            - aws-s3/sync: # Archive old jar from S3 # remove step if not desired (the next steps are gonna work)
                from: ${BUCKET}/build
                to: ${BUCKET}/old-builds
    
      - aws-s3/sync: # Replace the old jar inside the S3
          arguments: --delete
          from: build/libs
          to: ${BUCKET}/build
      - aws-s3/copy: # Copy .env.{env} to build/
          from: ${BUCKET}/envs/.env.<<parameters.env>>
          to: ${BUCKET}/build/.env.<<parameters.env>>-<<pipeline.git.revision>>
      - run:
          name: Check the build files in S3 
          command: aws s3 ls --recursive ${BUCKET}/build
      - run:
          name: Sync the build files from S3 to EC2
          command: ssh ${EC2_USER}@${EC2_HOST} "aws s3 sync --delete ${BUCKET}/build build"
      - run:
          name: Check the build files in EC2
          command: ssh ${EC2_USER}@${EC2_HOST} 'ls -laF build'
      - run:
          name: Check environment variables
          command: ssh ${EC2_USER}@${EC2_HOST} env
      - run:
          name: Execute the jar
          command: ssh ${EC2_USER}@${EC2_HOST} "echo \${$} > app.pid && exec java -jar build/*.jar" & sleep 20
      - run:
          name: Check running application instance
          command: ssh ${EC2_USER}@${EC2_HOST} "cat app.pid | xargs ps"
      # - discord/status: #TODO 
      #     webhook: ${DISCORD_WEBHOOK_URL}
      #     success_mentions: "1074798048611414026"
      #     success_message: ":tada: Hurray, **${CIRCLE_USERNAME}**'s **${CIRCLE_JOB}** job of **${CIRCLE_PROJECT_REPONAME}** project has succeeded!"
      #     failure_mentions: "&1163035305545306162"

workflows:
  test_and_deploy_to_dev:
    when:
      not:
        or:
          - equal: [ develop, << pipeline.git.branch >> ]
          - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - gradle/run: &build_job
          name: build
          executor:
            <<: *java8
          app_src_directory: backend
          command: build -x test -x checkstyleMain -x checkstyleTest -x jacocoTestCoverageVerification
      - parallel_tests_backend:
          requires:
            - build
      - gradle/test:
          name: checkstyle
          requires:
            - build
          executor:
            <<: *java8
          app_src_directory: backend
          test_command: checkstyleMain; ./gradlew checkstyleTest
          reports_path: backend/build/reports/checkstyle
      - gradle/test:
          name: coverage
          requires:
            - build
          executor:
            <<: *java8
          test_command: jacocoTestReport && ./gradlew jacocoTestCoverageVerification
          app_src_directory: backend
          reports_path: backend/build/jacoco
      - deploy_backend:
          name: deploy backend to dev
          requires:
            - build # TODO replace with `test`
          filters:
            branches:
              ignore:
                - develop
                - main
          # rename_files: -<<pipeline.git.revision>>
          archive: true
          env: dev
          context:
            - committed-daniels-aws-ec2-dev
  deploy_to_staging:
    when:
      equal: [ develop, << pipeline.git.branch >> ]
    jobs:
      - gradle/run:
          <<: *build_job
      - deploy_backend:
          name: deploy to staging environment
          requires:
            - build
          env: staging
          context:
            - committed-daniels-aws-ec2-staging
  deploy_to_production:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - gradle/run: 
          <<: *build_job
      - deploy_backend:
          name: deploy to staging environment
          requires:
            - build
          archive: true
          env: production
          context:
            - committed-daniels-aws-ec2-production

