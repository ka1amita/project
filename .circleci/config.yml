version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

jobs:
  parallel_tests:
    working_directory: ~/project/backend
    executor: &java8
      name: gradle/default
      tag: "8.0"
    parallelism: 5
    steps:
      - checkout:
          path: ..
      - gradle/with_cache:
          steps:
            # allows "re-run failed tests"; https://circleci.com/docs/rerun-failed-tests/
            - run:
                name: Parse classnames and split by timing
                command: |
                  cd src/test/java
                  circleci tests glob "**/*.java" | cut -c 1- | sed 's@/@.@g' | sed 's/.\{5\}$//' | circleci tests run --command=">classnames.txt xargs echo" --verbose --split-by=timings --timings-type=classname
                  [ -s classnames.txt ] || circleci-agent step halt
            - run:
                name: Run split tests
                command: |
                  GRADLE_ARGS=$(cat src/test/java/classnames.txt | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
                  echo "Prepared arguments for Gradle: $GRADLE_ARGS"
                  ./gradlew test $GRADLE_ARGS
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/tests
  deploy:
    working_directory: ~/project/backend
    executor: *java8
    steps:
      - checkout:
          path: ..
      - run:
          name: SSH check
          command: ssh -o StrictHostKeychecking=no $EC2_USER@$EC2_HOST exit
      # - run:
      #     name: Reboot and wait
      #     command: ssh $EC2_USER@$EC2_HOST sudo reboot & sleep 60
      - run:
          name: Kill Java processes
          command: |
            ssh $EC2_USER@$EC2_HOST ps aux
            ssh $EC2_USER@$EC2_HOST killall -q java # suppress error message if no processes are matched
      - run:
          name: Clean-up .envs
          command: ssh $EC2_USER@$EC2_HOST echo cleaning-up .env files
          # command: ssh $EC2_USER@$EC2_HOST 'rm -vf $(find . -type f -name ".env.*")'
      - run:
          name: Clean-up jars
          command: ssh $EC2_USER@$EC2_HOST echo cleaning-up .env files
          # command: ssh $EC2_USER@$EC2_HOST 'find . -type f -name "*.jar" | xargs rm -vf'
      - run:
          name: Check clean-up
          command: ssh $EC2_USER@$EC2_HOST "ls -la"
      - gradle/with_cache:
          steps:
            - run:
                name: Build jar
                command: ./gradlew bootJar
            - run:
                name: Upload jar
                command: scp $(find build/libs -name *.jar) $EC2_USER@$EC2_HOST:~
      - run:
          name: Upload .env
          command: echo downloading .env file from S3 # TODO
      - run:
          name: List directory
          command: ssh $EC2_USER@$EC2_HOST "ls -la"
      - run:
          name: Check environment variables
          command: ssh $EC2_USER@$EC2_HOST 'export $(grep -v ^# .env.* | xargs) && echo $DB_URL'
      - run:
          name: Execute jar
          command: ssh $EC2_USER@$EC2_HOST 'export $(grep -v ^# .env.* | xargs) && nohup java -jar *.jar &' & sleep 20
      - run:
          name: Check Running app
          command: ssh $EC2_USER@$EC2_HOST ps aux

workflows:
  test_and_deploy_to_dev:
    when:
      not:
        and:
          - equal: [ develop, << pipeline.git.branch >> ]
          - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - gradle/run: &build_job
          name: build
          executor:
            <<: *java8
          app_src_directory: backend
          command: build -x test -x checkstyleMain -x checkstyleTest -x jacocoTestCoverageVerification
      - parallel_tests:
          requires:
            - build
      - gradle/test:
          name: checkstyle
          requires:
            - build
          executor:
            <<: *java8
          app_src_directory: backend
          test_command: checkstyleMain; ./gradlew checkstyleTest
          reports_path: backend/build/reports/checkstyle
      - gradle/test:
          name: coverage
          requires:
            - build
          executor:
            <<: *java8
          test_command: jacocoTestReport && ./gradlew jacocoTestCoverageVerification
          app_src_directory: backend
          reports_path: backend/build/jacoco
      - deploy:
          name: deploy to development environment
          requires:
            - build # eplace with `test`
          filters:
            branches:
              ignore:
                - develop
                - main
          context:
            - committed-test-aws-ec2-dev # replace with committed-todo-aws-ec2-dev

  deploy_to_staging:
    when:
      equal: [ develop, << pipeline.git.branch >> ]
    jobs:
      - gradle/run:
          <<: *build_job
      - deploy:
          name: deploy to staging environment
          requires:
            - build
          context:
            - committed-test-aws-ec2-staging # replace with committed-todo-aws-ec2-staging
  deploy_to_production:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - gradle/run: 
          <<: *build_job
      - deploy:
          name: deploy to staging environment
          requires:
            - build
          context:
            - committed-test-aws-ec2-production # committed-todo-aws-ec2-production

